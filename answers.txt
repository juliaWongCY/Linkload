Put your answers to each of the following questions in this file.
You can instead create a file answers.pdf (LaTeX is recommended) that contains your answers to the questions.
You should submit your answers.txt or answers.pdf file via CATe.


Question 1:
How big (how many bytes) is the program code section of the file hello.o?
Explain how you arrived at your answer, including any mathematical conversions you had to make.

Answer:
In hexadecimal, it can represent number from 0 to 15, ie 16 numbers. This means that one hexadecimal digit represents 4 bits (2^4 = 16). Inside the file hello.o, using the objdump utility with the '--disassemble' option, we could visualize the assembler mnemonics that contain instructions.
As one hexadecimal digit represents 4 bits, a pair represents 8 bits, i.e. 1 byte.
For each 'mov' instruction, it contains 6 pairs of hexadecimal digits. Therefore 6 bytes each.
While for each 'int' instruction, it contains 2 pairs of hexadeciaml digits. Hence 2 bytes each.
There are total 6 'mov' and 2 'int' instructions in hello.o. Therefore the program code section of the file hello.o is 6*6 + 2*2 = 40 bytes.



 
 
Question 2:
How many relocation records are there in the file hello.o? 
Name them and explain how you arrived at your answer.

Answer:


Question 3:
How many relocation records are there in the file hello (the result of linking hello.o)?
Explain how you arrived at your answer. 

Answer:


Question 4:
What happens if you try to link chello.o using ld as you did with hello.o 
(that is by running the command: ld -N chello.o -o chello)?
Explain what has happened and how the nm utility can be used to confirm this.

Answer:

 
Question 5:
The last instruction in hello.s is an exit system call. 
What would happen if you assembled, linked and ran this programs with this instruction commented out?
(Hint: you might want to try this)
Explain why this happens. Does the program still terminate?

Answer:


 
